
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  phone String? @unique
  github_id String? @unique
  avatar String? @default("http://image.jpg")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  SMSToken SMSToken[]
  Product Product[]
  post Post[]

  comments Comment[]

  likes Like[]

  chat_room ChatRoom[]

  message Message[]
}

model SMSToken{
  id Int @id @default(autoincrement())
  token String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid Int
}

model Product{
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  title String
  price Float
  description String
  photo String
  user User @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid Int
}

model Post{
  id Int @id @default(autoincrement())
  title String
  description String?
  views Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid Int

  comments Comment[]

  likes Like[]
}

model Like{
  @@id(name:"id", [userid, postid])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid Int

  post Post @relation(fields: [postid], references: [id], onDelete: Cascade)
  postid Int

}

model Comment{
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid Int  

  post Post @relation(fields: [postid], references: [id], onDelete: Cascade)
  postid Int
}

model ChatRoom {
  id String @id @default(cuid())

  users User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  messages Message[]
}

model Message{
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room ChatRoom @relation(fields: [roomId], references: [id])
  roomId String

  user User @relation(fields: [userId], references: [id])
  userId Int
}
